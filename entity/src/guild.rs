//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "guild")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub guild_id: i64,
    pub welcome_settings_id: Option<i32>,
    pub create_user_id: i64,
    #[sea_orm(column_type = "Text")]
    pub create_date: String,
    pub modify_user_id: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub modify_date: Option<String>,
    pub auto_ban_role_id: Option<i64>,
    pub moderation_channel_id: Option<i64>,
    pub ban_reason_template: Option<String>,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub punish_mode: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::auto_ban_role::Entity")]
    AutoBanRole,
    #[sea_orm(has_many = "super::ban_entry::Entity")]
    BanEntry,
    #[sea_orm(has_many = "super::kick_entry::Entity")]
    KickEntry,
}

impl Related<super::auto_ban_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AutoBanRole.def()
    }
}

impl Related<super::ban_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BanEntry.def()
    }
}

impl Related<super::kick_entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KickEntry.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
